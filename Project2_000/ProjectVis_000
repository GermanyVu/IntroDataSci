// JavaScript source code

// Using jQuery, read our data and call visualize(...) only once the page is ready:
$(function () {
    d3.csv("simple-data.csv").then(function (data) {
        // Write the data to the console for debugging:
        console.log(data);

        // Call our visualize function:
        visualize(data);
    });
});


var visualize = function (data) {
    // Boilerplate:
    var margin = { top: 50, right: 50, bottom: 50, left: 50 },
       width = 960 - margin.left - margin.right,
       height = 500 - margin.top - margin.bottom;

    var svg = d3.select("#chart")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .style("width", width + margin.left + margin.right)
      .style("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // Visualization Code:


//X-axis
    var years = _.map(data, "Fall");
    years = _.uniq(years);

    var yearScale = d3.scalePoint()
      .domain(years)
      .range([0,width]);

      var xAxis1 = d3.axisBottom()
        .scale(yearScale)
        .tickValues( [1980,2018] );
        svg.append("g").call(xAxis1);



    // //Y-axis:
    // var opponents = _.map(data, "Opponent");
    // opponents = _.uniq(opponents);
    //
    // var opponentScale = d3.scalePoint()
    //   .domain(opponents)
    //   .range([0,height]);
    //
    //
    //
    // var yAxis = d3.axisLeft().scale(opponentScale);
    // svg.append("g")
    //   .attr("transform", "translate(0,10)")
    //   .call(yAxis)

         // Scale:
      var percentageScale = d3.scaleLinear()
                          .domain([0, 100])
                         .range([0, width/6]);


         // Axis:
       var axisVariable = d3.axisTop()
                            .scale(percentageScale);

       svg.append("g")
          .call(axisVariable);


    // var make = d3.nest()
    // .key(function(d) { return d.name; })
    // .rollup(function(v) { return {
    //   count: v.length,
    //   total: d3.sum(v, function(d) { return d.amount; }),
    //   avg: d3.mean(v, function(d) { return d.amount; })
    // }; })

    // Visual Encoding:
    // svg.selectAll("circles")
    //    .data(data)
    //    .enter()
    //    .append("circle")
    //    .attr("r", function (d) { return 4; })
    //    .attr("cx", function (d) { return yearScale(d.Fall); })
    //    .attr("cy", function (d) {
    //      //for (let i = 0; i < n; i++) { )
    //      return percentageScale(d.percentage);
    //    })
    //    .attr("fill" , function(d){ return d.color; })



};
